generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id             Int             @id @default(autoincrement())
    login          String          @unique @db.VarChar(64)
    name           String          @db.VarChar(64)
    password       String          @db.VarChar(64)
    categoryTags   CategoryTag[]
    categoryGroups CategoryGroup[]
    accounts       Account[]
}

model AccountType {
    id       Int       @id @default(autoincrement())
    type     String    @unique @db.VarChar(16)
    accounts Account[]
}

model Account {
    id                Int         @id @default(autoincrement())
    name              String      @db.VarChar(32)
    openingBalance    Decimal     @default(0) @db.Decimal(10, 2)
    maximumAmountOwed Decimal     @default(0) @db.Decimal(10, 2)
    builtIn           Boolean     @default(false)
    accountType       AccountType @relation(fields: [accountTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user              User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    accountTypeId     Int
    userId            Int

    @@unique([name, userId])
}

model CategoryTag {
    id     Int                @id @default(autoincrement())
    name   String             @unique @db.VarChar(256)
    user   User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    groups CategoryTagGroup[]
    userId Int
}

model CategoryGroup {
    id     Int                @id @default(autoincrement())
    name   String             @unique @db.VarChar(256)
    budget Float              @default(0)
    user   User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    tags   CategoryTagGroup[]
    userId Int
}

model CategoryTagGroup {
    id      Int           @id @default(autoincrement())
    tag     CategoryTag   @relation(references: [id], fields: [tagId], onDelete: Cascade, onUpdate: Cascade)
    group   CategoryGroup @relation(references: [id], fields: [groupId], onDelete: Cascade, onUpdate: Cascade)
    tagId   Int
    groupId Int

    @@unique([tagId, groupId])
}
